{"name": "test_merchant_search", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <tests.test_search.TestClass object at 0x10604fd00>\n\n    def test_merchant_search(self):\n        obj = imageprocess(self.driver)\n        obj.screenshot('https://paybright.com/en', 'base')\n        obj.screenshot('https://paybright.com/en','actual')\n>       obj.analyze('en_base.png', 'en_actual.png')\n\ntests/test_search.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <helpers.image.imageprocess object at 0x10606f1c0>, base_img = 'en_base.png', actual_img = 'en_actual.png'\n\n    def analyze(self, base_img, actual_img):\n        base_path = os.path.join(os.getcwd(), 'screenshots/base', base_img)\n        actual_path = os.path.join(os.getcwd(), 'screenshots/actual', actual_img)\n        screenshot_base = Image.open(base_path)\n        screenshot_actual = Image.open(actual_path)\n        columns = 60\n        rows = 80\n        screen_width, screen_height = screenshot_actual.size\n        result = True\n        block_width = ((screen_width - 1) // columns) + 1\n        block_height = ((screen_height - 1) // rows) + 1\n    \n        for y in range(0, screen_height, block_height + 1):\n            for x in range(0, screen_width, block_width + 1):\n                region_actual = self.process_region(screenshot_actual, x, y, block_width, block_height)\n                region_base = self.process_region(screenshot_base, x, y, block_width, block_height)\n    \n                if region_actual is not None and region_base is not None and region_base != region_actual:\n                    draw = ImageDraw.Draw(screenshot_actual)\n                    draw.rectangle((x, y, x + block_width, y + block_height), outline=\"red\")\n                    result = False\n    \n        if not result:\n            image1_size = screenshot_actual.size\n            output = Image.new('RGB', (2 * image1_size[0], image1_size[1]))\n            output.paste(screenshot_actual, (0, 0))\n            font = ImageFont.truetype(\"fonts.ttf\", 25)\n            screenshot_base = Image.open(base_path)\n            draw = ImageDraw.Draw(screenshot_base)\n            draw.text((200, 200), \"This is Base Image\", font=font)\n            cache_path = os.path.join(os.getcwd(), 'screenshots/cache', 'homepagecache.png')\n            screenshot_base.save(cache_path)\n            cache_base = Image.open(cache_path)\n            output.paste(cache_base, (image1_size[0], 0))\n            output.save(\"screenshots/result/merged_image.jpg\", \"JPEG\")\n>           assert False\nE           AssertionError\n\nhelpers/image.py:71: AssertionError"}, "attachments": [{"name": "log", "source": "5a090e73-19cf-47d4-bc56-d349768d176f-attachment.txt", "type": "text/plain"}], "start": 1643819544090, "stop": 1643819618681, "uuid": "a2ec362e-a9d0-4530-afa5-9a1ef1eb0946", "historyId": "94cdbc7d51e1556db68ca01807f0f711", "testCaseId": "f33d4be1533e3d440325031a7c678992", "fullName": "tests.test_search.TestClass#test_merchant_search", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('set_up')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_search"}, {"name": "subSuite", "value": "TestClass"}, {"name": "host", "value": "Harsh.S-MBPro"}, {"name": "thread", "value": "41758-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_search"}]}